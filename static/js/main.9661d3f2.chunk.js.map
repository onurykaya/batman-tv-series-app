{"version":3,"sources":["components/Header.js","actionCreators/actionCreators.js","actions/actions.js","components/TvShow.js","pages/Main.js","pages/Detail.js","pages/NotFound.js","App.js","serviceWorker.js","reducer/reducer.js","reducer/index.js","reducer/configureStore.js","index.js"],"names":["Header","className","to","src","alt","Component","loadTv","dispatch","type","TvShow","props","item","show","id","image","medium","name","genres","map","key","Math","random","rating","average","premiered","Main","fetchTvShows","this","tvShows","connect","state","reducer","data","fetch","then","res","json","Detail","loadTvShow","loading","tvShow","console","log","original","ReactHtmlParser","summary","ownProps","match","params","fetchTvShow","NotFound","App","exact","path","component","Boolean","window","location","hostname","initialState","reducers","combineReducers","action","middleware","thunk","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9661d3f2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n          <div className=\"header\">\r\n            <Link to=\"/\">\r\n              <img\r\n                src=\" https://i.ebayimg.com/images/g/HgQAAOSwhRxXKaqA/s-l400.jpg\"\r\n                alt=\"logo\"\r\n                className=\"logo\"\r\n              />\r\n            </Link>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n","import {FETCH_TV_SHOW, FETCH_TV_SHOWS, LOAD_TV_SHOW} from '../actions/actions';\r\n\r\nexport const loadTv = () => dispatch => {\r\n    return dispatch({\r\n        type: LOAD_TV_SHOW\r\n    })\r\n}\r\n\r\nexport const fetchTvShows = () => dispatch => {\r\n  fetch(\"https://api.tvmaze.com/search/shows?q=batman\")\r\n    .then(res => res.json())\r\n    .then(data =>\r\n      dispatch({\r\n        type: FETCH_TV_SHOWS,\r\n        data\r\n      })\r\n    );\r\n};\r\n\r\nexport const fetchTvShow = id => dispatch => {\r\n  fetch(`https://api.tvmaze.com/shows/${id}`)\r\n    .then(res => res.json())\r\n    .then(item =>\r\n      dispatch({\r\n        type: FETCH_TV_SHOW,\r\n        item\r\n      })\r\n    );\r\n};","export const FETCH_TV_SHOWS = \"FETCH_TV_SHOWS\";\r\nexport const FETCH_TV_SHOW = \"FETCH_TV_SHOW\";\r\nexport const LOAD_TV_SHOW = \"LOAD_TV_SHOW\";","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function TvShow(props) {\r\n    const {item} = props\r\n    return (\r\n      <div className=\"card\">\r\n        <Link to={`/detail/${item.show.id}`}>\r\n          <div className=\"banner\">\r\n            <img src={item.show.image.medium} alt={item.show.image.name} />\r\n          </div>\r\n        </Link>\r\n        <div className=\"container\">\r\n          <div className=\"name\">{item.show.name}</div>\r\n          <hr />\r\n          <div className=\"language\">\r\n            {item.show.genres.map(item => {\r\n              return <div key={Math.random()}>{item}</div>;\r\n            })}\r\n          </div>\r\n          {item.show.rating.average ? (\r\n            <div className=\"raiting\">Raiting: {item.show.rating.average}</div>\r\n          ) : (\r\n            <div className=\"raiting\">Raiting not found</div>\r\n          )}\r\n          <div className=\"premiered\"> {item.show.premiered} </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { fetchTvShows } from \"../actionCreators/actionCreators\";\r\nimport TvShow from '../components/TvShow';\r\n\r\n\r\n  class Main extends Component {\r\n    constructor(props){\r\n      super(props);\r\n      props.fetchTvShows()\r\n\t}\r\n    \r\n    render() {\r\n      const {props} = this;\r\n        return (\r\n          <div className=\"main-container\">\r\n            {props.tvShows.map(item => (\r\n              <TvShow key={item.show.id} item={item} />\r\n            ))}\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  tvShows: state.reducer.data\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, { fetchTvShows })(Main);\r\n","import React, { Component } from \"react\";\r\nimport { fetchTvShow, loadTv } from \"../actionCreators/actionCreators\";\r\nimport { connect } from \"react-redux\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\n\r\nclass Detail extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    props.loadTvShow(props.id);\r\n    props.loadTv(props.loading);\r\n    \r\n  }\r\n  render() {\r\n    const { props } = this;\r\n    const item = props.tvShow;\r\n    console.log(props.loading);\r\n    if(props.loading){\r\n      return (\r\n        <div>Loading</div>,\r\n        console.log(props.loading) \r\n        );\r\n    }else{\r\n      return (\r\n        <div className=\"detail-main-container\">\r\n          <div className=\"detail-banner\">\r\n            <img\r\n              className=\"detail-banner\"\r\n              src={item.image && item.image.original}\r\n              alt={item.name}\r\n            />\r\n          </div>\r\n          <div className=\"detail-name\"> {item.name} </div>\r\n          <hr />\r\n          <div className=\"summary\"> {ReactHtmlParser(item.summary)} </div>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  id: ownProps.match.params.id,\r\n  tvShow: state.reducer.item,\r\n  loading: state.reducer.loading\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  loadTvShow: id => dispatch(fetchTvShow(id)),\r\n  loadTv\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Detail);\r\n","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default class NotFound extends Component {\r\n    render() {\r\n        return (\r\n          <div className=\"notFound\">\r\n            <Link to=\"/\">\r\n              <img\r\n                className=\"notFoundImage\"\r\n                src=\"https://purepng.com/public/uploads/medium/purepng.com-batman-logobatmansuperherocomicdc-comicsbob-kanebat-manbruce-wayne-17015285234526j571.png\"\r\n                alt=\"notFound\"\r\n              />\r\n              <div>\r\n                <h1 className=\"notFoundTitle\">Not Found</h1>\r\n              </div>\r\n            </Link>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport Header from './components/Header';\nimport Main from './pages/Main';\nimport Detail from './pages/Detail';\nimport { Route, Switch } from \"react-router-dom\";\nimport NotFound from './pages/NotFound';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={Main} />\n        <Route exact path=\"/detail/:id\" component={Detail} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_TV_SHOWS, FETCH_TV_SHOW, LOAD_TV_SHOW } from \"../actions/actions\";\r\n\r\nconst initialState = {\r\n  data: [],\r\n  item: [],\r\n  loading: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_TV_SHOWS:\r\n      return {\r\n        ...state,\r\n        data: action.data\r\n      };\r\n    case FETCH_TV_SHOW:\r\n      return {\r\n        ...state,\r\n        item: action.item\r\n      };\r\n    case LOAD_TV_SHOW:\r\n      return {\r\n        ...state,\r\n        loading:true\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport reducer from './reducer';\r\n\r\nconst reducers =combineReducers({\r\n    reducer\r\n});\r\n\r\nexport default reducers;","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducers from './index'; \r\n\r\nconst middleware = [thunk];\r\nconst initialState = {};\r\n\r\nexport default function configureStore(){\r\n    return createStore(reducers, initialState, applyMiddleware(...middleware));\r\n};\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport configureStore from './reducer/configureStore';\nimport {HashRouter} from 'react-router-dom';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}